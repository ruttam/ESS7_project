<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

// universal channel stopping any activity as the context must be switched
broadcast chan stop;

// -----------------------------------------------------------------------

// number of partitions (0-th partition is placeholder-empty partition in the code)
const int PARTITIONS = 5;
typedef int[0, PARTITIONS] partition_id;

// 0 - IDLE, 1 - COLD_START, 2 - WARM_START, 3 - NORMAL
typedef int [0, 3] mode_id;
broadcast chan SET_PARTITION_MODE[partition_id][mode_id];

typedef struct {
    partition_id id;
    int period;
    int duration;
} Partition;

Partition ps[PARTITIONS] = {
   {1, 10, 2},
   {2, 10, 1},
   {3, 10, 3},
   {4, 10, 2},
   {5, 20, 2}
};

mode_id psModes[partition_id] = {0, 0, 0, 0, 0, 0};

broadcast chan startPartition[partition_id];

// -----------------------------------------------------------------------

broadcast chan scheduleProcesses[partition_id];

const int PROCESSES = 100;
// from 0 to arbitrary big number allowing big range of possible process IDs
typedef int [0, 1000] process_id;

typedef struct {
   process_id id;
   partition_id part_id;
   int period;
   int duration;
   int prior;
} Process;

// 0 - DORMANT, 1 - WAITING, 2 - READY, 3 - RUNNING
// mode_id status;

Process pss[12] = {
   {0, 1, 1, 1, 0},
   {1, 1, 10, 1, 2},
   {2, 1, 10, 3, 1},
   {3, 2, 10, 1, 0},
   {4, 2, 20, 3, 1},
   {5, 2, 10, 2, 2},
   {6, 3, 10, 1, 0},
   {7, 3, 20, 3, 1},
   {8, 3, 10, 2, 2},
   {6, 3, 10, 1, 0},
   {7, 3, 20, 3, 1},
   {8, 3, 10, 2, 2}
};

broadcast chan START[process_id];
broadcast chan SUSPEND[process_id];
broadcast chan STOP[process_id];
broadcast chan STOP_SELF[process_id];
broadcast chan SUSPEND_SELF[process_id];
broadcast chan PERIODIC_WAIT[partition_id];

bool preemption_enabled = true;
chan RESCHEDULE_PROCESSES[partition_id];

// -----------------------------------------------------------------------

typedef int[0, 1000] event_id;


broadcast chan CREATE_EVENT[event_id];
broadcast chan SET_EVENT[event_id];
broadcast chan RESET_EVENT[event_id];

typedef struct {
   partition_id p;
   int event_limit;
} PartitionLimit;

PartitionLimit pl[PARTITIONS] = {
   {1, 10},
   {2, 10},
   {3, 10},
   {4, 10},
   {5, 20}
};

PartitionLimit plc[PARTITIONS] = {
   {1, 0},
   {2, 0},
   {3, 0},
   {4, 0},
   {5, 0}
};

int getEventLimit(partition_id id) {
   return 0;
}

int getEventCount(partition_id id) {
   return 0;
}

typedef struct {
   process_id p;
   event_id e;
} ProcessWait;

ProcessWait waiting[12] = {
   {0, 0},
   {1, 0},
   {2, 0},
   {3, 0},
   {4, 0},
   {5, 0},
   {6, 0},
   {7, 0},
   {8, 0},
   {6, 0},
   {7, 0},
   {8, 0}
};

typedef struct {
   partition_id p;
   int e_limit;
} EventLimit;

// -----------------------------------------------------------------------

const int WINDOWS = 11;
// from 0 to arbitrary big number allowing big range of possible window IDs
typedef int [0, 1000] window_id;

typedef struct {
    int id;
    int start;
    int duration;
    bool period;
} Window;

Window ws[WINDOWS] = {
   {101, 0, 2, true},
   {102, 10, 2, true},
   {201, 3, 1, true},
   {202, 13, 1, true},
   {301, 4, 3, true},
   {302, 14, 3, true},
   {401, 2, 1, true},
   {402, 7, 1, false},
   {403, 12, 1, true},
   {404, 17, 1, false},
   {501, 18, 2, true}
};

int schedule[WINDOWS] = {101, 401, 201, 301, 402, 102, 403, 202, 302, 404, 501};

// get duration of the window with the given ID
int getDuration(int id) {
   int i;
   for(i = 0; i &lt; WINDOWS; i++)
      if(ws[i].id == schedule[id]) return ws[i].duration;
   return 0;
}

broadcast chan startWindow[window_id];

// -----------------------------------------------------------------------

typedef struct {
    partition_id partition;
    int window;	
} PartitionWindow;

PartitionWindow pairs[WINDOWS] = {
    {1, 101},
    {1, 102},
    {2, 201},
    {2, 202},
    {3, 301},
    {3, 302},
    {4, 401},
    {4, 402},
    {4, 403},
    {4, 404},
    {5, 501}
};


int getPartition (int window) {
   int i;
   for(i = 0; i &lt; WINDOWS; i++) {
    if(pairs[i].window == window) return pairs[i].partition;
   }
   return 0;
}

// -----------------------------------------------------------------------

int watchdog_counter = 0;

chan RESUME;


// -----------------------------------------------------------------------

broadcast chan HealthMonitor[partition_id];

broadcast chan RAISE_APPLICATION_ERROR;
broadcast chan REPORT_APPLICATION_MESSAGE;
broadcast chan CREATE_ERROR_HANDLER; // creates (starts) an error handler process for the current partition
broadcast chan GET_ERROR_STATUS;

typedef int[0, 1000] error_code;

typedef struct {
   partition_id partition;
   error_code code;
} Error;

Error errorQueue[1] = {
	{1, 12}
};

int errorQueueLength() {
   return 1;
}

int getError() {
   return 1;
}

int getMessage() {
   return 0;
}

// recovery actions defined in the HM table
broadcast chan HM[error_code];
void resolveError(error_code code) {

}

int healthCounter[PARTITIONS] = {0, 0, 0, 0, 0};

// -----------------------------------------------------------------------

int findHealthMonitorProcess(int id) {
   return 0;
}

int getCurrentPartition() {
   return 0;
}

int getCurrentProcess() {
   return 0;
}

// -----------------------------------------------------------------------</declaration><template><name>PartitionTemplate</name><parameter>int id, int duration</parameter><declaration>// Place local declarations here.
clock y;

bool start;
int code; // error code</declaration><location id="id0" x="-1048" y="-256"><urgent/></location><location id="id1" x="-568" y="-144"><urgent/></location><location id="id2" x="-816" y="-256"><name x="-840" y="-288">FAILED</name></location><location id="id3" x="-464" y="-256"><name x="-474" y="-286">WARM</name></location><location id="id4" x="-816" y="-72"><name x="-888" y="-96">NORMAL</name><label kind="invariant" x="-856" y="-56">y &lt;= duration</label></location><location id="id5" x="-464" y="-72"><name x="-520" y="-88">COLD</name><urgent/></location><location id="id6" x="-216" y="-72"><name x="-208" y="-104">IDLE</name></location><init ref="id6"/><transition><source ref="id0"/><target ref="id2"/><label kind="synchronisation" x="-1040" y="-280">RAISE_APPLICATION_ERROR!</label></transition><transition><source ref="id4"/><target ref="id0"/><label kind="guard" x="-1040" y="-104">y &gt; duration</label><nail x="-1048" y="-72"/></transition><transition><source ref="id1"/><target ref="id3"/><label kind="synchronisation" x="-616" y="-216">SET_PARTITION_MODE[id][2]!</label><label kind="assignment" x="-576" y="-200">psModes[id] = 2</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="-408" y="-128">startPartition[id]?</label><label kind="assignment" x="-408" y="-112">psModes[id] = 1,
start = true</label><nail x="-240" y="-96"/><nail x="-424" y="-96"/></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="-552" y="-128">start == true</label><label kind="assignment" x="-704" y="-136">y := 0,
psModes[id] = 3,
start = false</label><nail x="-504" y="-104"/><nail x="-768" y="-104"/></transition><transition><source ref="id4"/><target ref="id1"/><label kind="synchronisation" x="-736" y="-168">stop?</label><nail x="-736" y="-144"/></transition><transition><source ref="id5"/><target ref="id6"/><label kind="synchronisation" x="-464" y="0">SET_PARTITION_MODE[id][0]?</label><label kind="assignment" x="-464" y="16">psModes[id] = 0</label><nail x="-464" y="-8"/><nail x="-216" y="-8"/></transition><transition><source ref="id6"/><target ref="id3"/><label kind="synchronisation" x="-432" y="-240">SET_PARTITION_MODE[id][2]?</label><label kind="assignment" x="-336" y="-224">psModes[id] = 2</label><nail x="-232" y="-200"/><nail x="-408" y="-200"/></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="-432" y="-72">SET_PARTITION_MODE[id][1]?</label><label kind="assignment" x="-432" y="-48">psModes[id] = 1</label><nail x="-240" y="-48"/><nail x="-432" y="-48"/></transition><transition><source ref="id3"/><target ref="id6"/><label kind="synchronisation" x="-408" y="-296">SET_PARTITION_MODE[id][0]?</label><label kind="assignment" x="-408" y="-280">psModes[id] = 0</label><nail x="-216" y="-256"/></transition><transition><source ref="id3"/><target ref="id5"/><label kind="synchronisation" x="-464" y="-176">SET_PARTITION_MODE[id][1]?</label><label kind="assignment" x="-464" y="-160">psModes[id] = 1</label></transition><transition><source ref="id3"/><target ref="id4"/><label kind="synchronisation" x="-744" y="-240">startPartition[id]?</label><label kind="assignment" x="-744" y="-216">y := 0,
psModes[id] = 3</label><nail x="-568" y="-216"/><nail x="-744" y="-216"/></transition><transition><source ref="id2"/><target ref="id6"/><label kind="synchronisation" x="-368" y="-352">SET_PARTITION_MODE[id][0]?</label><label kind="assignment" x="-368" y="-336">psModes[id] = 0</label><nail x="-792" y="-312"/><nail x="-168" y="-312"/><nail x="-168" y="-72"/></transition><transition><source ref="id2"/><target ref="id5"/><label kind="synchronisation" x="-1080" y="0">SET_PARTITION_MODE[id][1]?</label><label kind="assignment" x="-1080" y="16">psModes[id] = 1</label><nail x="-872" y="-312"/><nail x="-1080" y="-312"/><nail x="-1080" y="-8"/><nail x="-504" y="-8"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="synchronisation" x="-776" y="-296">SET_PARTITION_MODE[id][2]?</label><label kind="assignment" x="-776" y="-280">psModes[id] = 2</label></transition><transition><source ref="id4"/><target ref="id2"/><label kind="synchronisation" x="-968" y="-200">RAISE_APPLICATION_ERROR?</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-704" y="-80">startPartition[id]?</label><label kind="assignment" x="-704" y="-56">y := 0,
psModes[id] = 3</label><nail x="-512" y="-56"/><nail x="-768" y="-56"/></transition></template><template><name>WindowScheduler</name><declaration>// major frame duration - calculated at the start of the partition scheduler in mfDuration()
int majorFrame;

clock x, y, z; // local clocks

int current; // current window ID
int wDuration; // window duration

// greatest common denominator (used in finding lcm)
int gcd (int a, int b) {
  while(b != 0) {
    if(a &gt; b) a -= b;
    else b -= a;
  }
  return a;
}

// major frame duration is least common multiple of all partition periods
int mfDuration() {
  int i;
  int lcm = ps[0].period;
  for(i = 1; i &lt; PARTITIONS; i++)
    lcm = lcm * ps[i].period/gcd(lcm, ps[i].period);
  return lcm;
}

// get the next window number in schedule
int next() {
   int next = current + 1;
   if(next == WINDOWS) next = 0;
   return next;
}

// get the start offset of the current partition
int getStart() {
   int i;
   for(i = 0; i &lt; WINDOWS; i++)
      if(ws[i].id == schedule[current]) return ws[i].start;
   return 0;
}</declaration><location id="id7" x="192" y="-64"><urgent/></location><location id="id8" x="296" y="-64"></location><location id="id9" x="296" y="80"><urgent/></location><location id="id10" x="-328" y="0"><label kind="invariant" x="-384" y="16">y &lt;= getStart()</label></location><location id="id11" x="-32" y="0"><label kind="invariant" x="-8" y="-16">y &lt;= majorFrame &amp;&amp;
x &lt;= wDuration</label></location><location id="id12" x="-480" y="0"><name x="-496" y="16">start</name></location><init ref="id12"/><transition><source ref="id7"/><target ref="id11"/><label kind="synchronisation" x="0" y="-88">START[getCurrentProcess()]!</label><label kind="assignment" x="0" y="-64">z := 0</label><nail x="-8" y="-64"/></transition><transition><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="216" y="-88">RESUME?</label></transition><transition><source ref="id9"/><target ref="id8"/><label kind="synchronisation" x="304" y="0">HealthMonitor[getCurrentPartition()]!</label></transition><transition><source ref="id11"/><target ref="id9"/><label kind="guard" x="0" y="56">z == 1</label><label kind="synchronisation" x="48" y="56">SUSPEND[getCurrentProcess()]!</label><label kind="assignment" x="48" y="80">watchdog_counter += 1</label><nail x="0" y="80"/></transition><transition><source ref="id11"/><target ref="id10"/><label kind="guard" x="-144" y="-88">y &gt;= majorFrame</label><label kind="synchronisation" x="-336" y="-88">stop!</label><label kind="assignment" x="-264" y="-96">y := 0,
current := 0</label><nail x="-32" y="-64"/><nail x="-328" y="-64"/></transition><transition><source ref="id12"/><target ref="id10"/><label kind="assignment" x="-536" y="-56">majorFrame := mfDuration(),
current := 0,
y := 0</label></transition><transition><source ref="id11"/><target ref="id10"/><label kind="guard" x="-128" y="80">x &gt;= wDuration</label><label kind="synchronisation" x="-336" y="80">stop!</label><label kind="assignment" x="-248" y="80">current := next()</label><nail x="-32" y="80"/><nail x="-328" y="80"/></transition><transition><source ref="id10"/><target ref="id11"/><label kind="synchronisation" x="-288" y="-24">startPartition[getPartition(current)]!</label><label kind="assignment" x="-264" y="0">x := 0, z := 0,
watchdog_counter := 0,
wDuration := getDuration(current)</label></transition></template><template><name>ProcessTemplate</name><parameter>int id, int part_id, int duration, int deadline</parameter><declaration>clock y;

int code; // error code to pass to health monitor</declaration><location id="id13" x="72" y="96"><urgent/></location><location id="id14" x="-584" y="-240"><urgent/></location><location id="id15" x="272" y="-304"><urgent/></location><location id="id16" x="-160" y="-272"><name x="-170" y="-302">initial</name></location><location id="id17" x="-160" y="-184"><name x="-240" y="-216">DORMANT</name></location><location id="id18" x="272" y="-40"><name x="280" y="-64">RUNNING</name><label kind="invariant" x="288" y="-40">y &lt;= duration</label></location><location id="id19" x="56" y="-40"><name x="64" y="-64">READY</name></location><location id="id20" x="-160" y="-40"><name x="-224" y="-72">WAITING</name></location><init ref="id16"/><transition><source ref="id13"/><target ref="id20"/><label kind="synchronisation" x="-152" y="72">scheduleProcesses[part_id]!</label><nail x="-160" y="96"/></transition><transition><source ref="id18"/><target ref="id17"/><label kind="synchronisation" x="104" y="-200">STOP_SELF[id]?</label><nail x="208" y="-176"/><nail x="-32" y="-176"/></transition><transition><source ref="id19"/><target ref="id14"/><label kind="guard" x="-24" y="104">y &gt; deadline</label><label kind="assignment" x="0" y="120">code = 2</label><nail x="56" y="104"/><nail x="-616" y="104"/><nail x="-616" y="-240"/></transition><transition><source ref="id15"/><target ref="id14"/><nail x="-584" y="-304"/></transition><transition><source ref="id14"/><target ref="id17"/><label kind="synchronisation" x="-568" y="-264">RAISE_APPLICATION_ERROR!</label><nail x="-256" y="-240"/></transition><transition><source ref="id20"/><target ref="id14"/><label kind="guard" x="-288" y="16">y &gt; deadline</label><label kind="assignment" x="-288" y="32">code = 2</label><nail x="-208" y="16"/><nail x="-584" y="16"/></transition><transition><source ref="id18"/><target ref="id15"/><label kind="guard" x="280" y="-136">y &gt; duration</label><label kind="assignment" x="280" y="-176">code = 1</label></transition><transition><source ref="id20"/><target ref="id17"/><label kind="synchronisation" x="-560" y="-240">SUSPEND[id]?</label><nail x="-208" y="-8"/><nail x="-560" y="-8"/><nail x="-560" y="-216"/><nail x="-248" y="-216"/></transition><transition><source ref="id18"/><target ref="id17"/><label kind="synchronisation" x="-8" y="-224">SET_PARTITION_MODE[part_id][0]?</label><nail x="232" y="-200"/><nail x="-32" y="-200"/></transition><transition><source ref="id18"/><target ref="id17"/><label kind="synchronisation" x="8" y="-248">SET_PARTITION_MODE[part_id][1]?</label><nail x="240" y="-224"/><nail x="-40" y="-224"/></transition><transition><source ref="id20"/><target ref="id17"/><label kind="synchronisation" x="-544" y="-208">SET_PARTITION_MODE[part_id][2]?</label><nail x="-208" y="-24"/><nail x="-544" y="-24"/><nail x="-544" y="-184"/><nail x="-200" y="-184"/></transition><transition><source ref="id20"/><target ref="id17"/><label kind="synchronisation" x="-528" y="-176">SET_PARTITION_MODE[part_id][1]?</label><nail x="-200" y="-40"/><nail x="-528" y="-40"/><nail x="-528" y="-152"/><nail x="-248" y="-152"/></transition><transition><source ref="id20"/><target ref="id17"/><label kind="synchronisation" x="-512" y="-144">SET_PARTITION_MODE[part_id][0]?</label><nail x="-208" y="-56"/><nail x="-512" y="-56"/><nail x="-512" y="-120"/><nail x="-248" y="-120"/></transition><transition><source ref="id16"/><target ref="id17"/><label kind="synchronisation" x="-248" y="-256">scheduleProcesses[part_id]?</label></transition><transition><source ref="id18"/><target ref="id19"/><label kind="synchronisation" x="120" y="16">SUSPEND[id]?</label><nail x="216" y="40"/><nail x="96" y="40"/></transition><transition><source ref="id18"/><target ref="id13"/><label kind="synchronisation" x="120" y="72">PERIODIC_WAIT[id]?</label><nail x="264" y="96"/></transition><transition><source ref="id17"/><target ref="id19"/><label kind="guard" x="-120" y="-104">psModes[part_id] == 3</label><label kind="synchronisation" x="-80" y="-88">START[id]?</label><label kind="assignment" x="-32" y="-72">y := 0</label><nail x="-104" y="-56"/></transition><transition><source ref="id19"/><target ref="id17"/><label kind="guard" x="56" y="-136">psModes[part_id] == 3</label><label kind="synchronisation" x="56" y="-120">STOP[id]?</label><nail x="56" y="-128"/></transition><transition><source ref="id18"/><target ref="id17"/><label kind="synchronisation" x="24" y="-272">SET_PARTITION_MODE[part_id][2]?</label><nail x="256" y="-248"/><nail x="-48" y="-248"/></transition><transition><source ref="id19"/><target ref="id20"/><label kind="guard" x="-112" y="40">psModes[part_id] == 3</label><label kind="synchronisation" x="-96" y="16">SUSPEND[id]?</label><nail x="0" y="40"/><nail x="-96" y="40"/></transition><transition><source ref="id17"/><target ref="id20"/><label kind="guard" x="-224" y="-128">psModes[part_id] != 3</label><label kind="assignment" x="-200" y="-112">y := 0</label></transition><transition><source ref="id19"/><target ref="id18"/><label kind="synchronisation" x="112" y="-40">START[id]?</label><label kind="assignment" x="136" y="-64">y := 0</label></transition><transition><source ref="id20"/><target ref="id19"/><label kind="guard" x="-128" y="-40">psModes[part_id] == 3</label><label kind="synchronisation" x="-168" y="-24">SET_PARTITION_MODE[part_id][3]?</label></transition></template><template><name>HealthMonitorTemplate</name><parameter>int part_id</parameter><declaration>clock y;

int previous_counter;

int partition_id;
int handler_process_id; // error handler process id of a particular partition (if any)

int findErrorHandler() {
   int partition = getCurrentPartition();
   
   // find in the processes table process within this partition with priority 0

   return 0;   
}

int error_code;
int error_count;
int error_message;</declaration><location id="id21" x="-632" y="8"></location><location id="id22" x="224" y="8"><urgent/></location><location id="id23" x="640" y="8"><urgent/></location><location id="id24" x="-16" y="-120"><urgent/></location><location id="id25" x="448" y="8"></location><location id="id26" x="-16" y="8"><urgent/></location><location id="id27" x="-440" y="8"></location><init ref="id27"/><transition><source ref="id27"/><target ref="id26"/><label kind="guard" x="-376" y="168">error_count != 0</label><nail x="-384" y="168"/><nail x="-80" y="168"/></transition><transition><source ref="id27"/><target ref="id26"/><label kind="guard" x="-368" y="112">watchdog_counter != 0
&amp;&amp; watchdog_counter != previous_counter + 1</label><nail x="-376" y="112"/><nail x="-96" y="112"/></transition><transition><source ref="id27"/><target ref="id21"/><label kind="guard" x="-640" y="-96">error_count == 0 &amp;&amp;
previous_counter == watchdog_counter + 1</label><label kind="synchronisation" x="-576" y="-56">RESUME!</label><nail x="-472" y="-56"/><nail x="-608" y="-56"/></transition><transition><source ref="id21"/><target ref="id27"/><label kind="synchronisation" x="-608" y="16">HealthMonitor[part_id]?</label><label kind="assignment" x="-640" y="32">error_count = errorQueueLength()</label></transition><transition><source ref="id26"/><target ref="id27"/><label kind="guard" x="-328" y="-80">handler_process_id == 0</label><label kind="synchronisation" x="-328" y="-56">HM[getError()]!</label><nail x="-96" y="-56"/><nail x="-384" y="-56"/></transition><transition><source ref="id22"/><target ref="id25"/><label kind="synchronisation" x="240" y="-16">START[handler_process_id]!</label></transition><transition><source ref="id23"/><target ref="id25"/><label kind="assignment" x="472" y="56">error_code = getError()</label><nail x="600" y="56"/><nail x="472" y="56"/></transition><transition><source ref="id26"/><target ref="id27"/><label kind="guard" x="-296" y="56">error_count == 0</label><nail x="-96" y="56"/><nail x="-376" y="56"/></transition><transition><source ref="id25"/><target ref="id23"/><label kind="synchronisation" x="464" y="-16">GET_ERROR_STATUS?</label></transition><transition><source ref="id24"/><target ref="id26"/><label kind="assignment" x="-120" y="-88">error_message = getMessage()</label></transition><transition><source ref="id26"/><target ref="id24"/><label kind="synchronisation" x="8" y="-144">REPORT_APPLICATION_MESSAGE?</label><nail x="136" y="-120"/></transition><transition><source ref="id25"/><target ref="id26"/><label kind="synchronisation" x="8" y="56">SUSPEND_SELF[handler_process_id]?</label><label kind="assignment" x="8" y="72">error_count = errorQueueLength()</label><nail x="448" y="56"/><nail x="-16" y="56"/></transition><transition><source ref="id26"/><target ref="id22"/><label kind="guard" x="8" y="8">error_count &gt; 0</label><label kind="synchronisation" x="8" y="-16">CREATE_ERROR_HANDLER!</label></transition><transition><source ref="id27"/><target ref="id26"/><label kind="synchronisation" x="-336" y="-8">RAISE_APPLICATION_ERROR?</label><label kind="assignment" x="-336" y="8">handler_process_id = findErrorHandler()</label></transition></template><template><name>ProcessScheduler</name><location id="id28" x="0" y="0"></location><init ref="id28"/></template><template><name>EventTemplate</name><parameter>int id, int part_id</parameter><declaration>int code;
int event_number;</declaration><location id="id29" x="-488" y="-168"></location><location id="id30" x="-680" y="24"><name x="-690" y="-6">UP</name></location><location id="id31" x="-400" y="24"><urgent/></location><location id="id32" x="24" y="-168"><urgent/></location><location id="id33" x="-192" y="24"><name x="-184" y="0">DOWN</name></location><location id="id34" x="-192" y="-168"></location><init ref="id34"/><transition><source ref="id29"/><target ref="id34"/><label kind="synchronisation" x="-440" y="-232">RAISE_APPLICATION_ERROR!</label><label kind="assignment" x="-376" y="-208">code := 4</label><nail x="-448" y="-208"/><nail x="-232" y="-208"/></transition><transition><source ref="id34"/><target ref="id29"/><label kind="guard" x="-472" y="-168">event_number + 1 == getEventLimit(part_id)</label><label kind="synchronisation" x="-408" y="-152">CREATE_EVENT[id]?</label></transition><transition><source ref="id31"/><target ref="id30"/><label kind="synchronisation" x="-656" y="0">RESCHEDULE_PROCESSES[part_id]!</label></transition><transition><source ref="id30"/><target ref="id33"/><label kind="synchronisation" x="-616" y="88">RESET_EVENT[id]?</label><nail x="-624" y="88"/><nail x="-232" y="88"/></transition><transition><source ref="id33"/><target ref="id31"/><label kind="synchronisation" x="-344" y="0">SET_EVENT[id]?</label></transition><transition><source ref="id32"/><target ref="id34"/><label kind="synchronisation" x="-176" y="-128">RAISE_APPLICATION_ERROR!</label><label kind="assignment" x="-112" y="-152">code := 5</label><nail x="-8" y="-128"/><nail x="-152" y="-128"/></transition><transition><source ref="id34"/><target ref="id32"/><label kind="guard" x="-160" y="-208">psModes[part_id] == 3</label><label kind="synchronisation" x="-160" y="-192">CREATE_EVENT[id]?</label></transition><transition><source ref="id34"/><target ref="id33"/><label kind="guard" x="-472" y="-104">psModes[part_id] != 3 &amp;&amp;
event_number + 1 != getEventLimit(part_id)</label><label kind="synchronisation" x="-336" y="-56">CREATE_EVENT[id]?</label><label kind="assignment" x="-416" y="-32">event_number = event_number + 1</label></transition></template><system>// Place template instantiations here.

scheduler = WindowScheduler();
partition1 = PartitionTemplate(1, 10);

partition2 = PartitionTemplate(2, 10);

partition3 = PartitionTemplate(3, 10);

partition4 = PartitionTemplate(4, 10);

partition5 = PartitionTemplate(5, 10);

// List one or more processes to be composed into a system.
system scheduler, partition1, partition2, partition3, partition4, partition5;</system></nta>